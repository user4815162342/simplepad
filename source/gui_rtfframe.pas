unit gui_rtfframe;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, RichMemo, Forms, Controls, Graphics, Dialogs,
    gui_documentframe;

// TODO: May be superseded if I can get lazWebKit to work.

// TODO: Okay, I don't really *need* the lists for now, but I *do* need undo/redo.
// The only way I can think of to work around this is to do one of the following
// (ordered easiest to hardest)
// 0. (FAILED) Switch to qt widgetset and see if that version is working. RESULT:
//    The undo worked, but there were other problems, including the loading of
//    Rich Text in the first place, and turning bold on and off.
// 1. Try to get undo to work by calling into the gtk methods directly using
//    handles generated by the trichmemo (possibly, I can make use of protected
//    functions of TRichMemo by creating my own descendant). The only risk
//    this has is if TRichMemo is ever fixed I'll have my own code overriding
//    stuff.
// 2. Update to a newer Linux version so I can update Lazarus and hopefully
//    get a newer version of the code which has these issues fixed.
// 3. Copy the package from the LCL source, fix it, and load it separately.
// 4. Connect to the gtk component directly.


// TODO: For text formats, instead of just updating the parameters for the
// whole selection at once, I probably have to go through each StyleRange
// (GetStyleRange) and convert each one of those instead. Otherwise, I'm
// basically painting the style of the beginning of the selection onto the
// rest.

// TODO: Lists aren't working quite right yet. For example, numbers have
// a weird character there, and none of the stuff retains the styles
// when you press return.

type

  { TRTFFrame }

  TRTFFrame = class(TDocumentFrame)
    RTFEditor: TRichMemo;
  private
    { private declarations }
  protected
    procedure CreateNewDocument; override;
    function GetIsModified: Boolean; override;
    procedure Save(aStream: TStream); override;
    procedure StyleBullettedList;
    procedure StyleBodyText;
    procedure StyleNumberedList;
    procedure StyleHeader;
    procedure SetIndent(aValue: Double);
    procedure DeltaIndent(aDelta: Double);
    class constructor Create;
  public
    { public declarations }
    procedure Load(aStream: TStream); override;
    procedure DisplayLoadError(aText: String); override;
    function CanUndo: Boolean; override;
    function CanRedo: Boolean; override;
    procedure Paste; override;
    procedure Copy; override;
    procedure Cut; override;
    procedure Undo; override;
    procedure Redo; override;
    procedure SelectAll; override;

    procedure ToggleTextStyle(aFormat: TTextStyle); override;
    procedure ClearTextStyles; override;
    procedure SetParagraphStyle(aFormat: TParagraphStyle); override;
    procedure DecreaseListIndent; override;
    procedure IncreaseListIndent; override;
    function CanFormat: Boolean; override;
  end;

implementation

{$R *.lfm}

{ TRTFFrame }


procedure TRTFFrame.CreateNewDocument;
begin
  RTFEditor.Clear;
  RTFEditor.ReadOnly := false;
  RTFEditor.Modified := false;
end;

function TRTFFrame.GetIsModified: Boolean;
begin
  result := RTFEditor.Modified;

end;

procedure TRTFFrame.Save(aStream: TStream);
begin
  RTFEditor.SaveRichText(aStream);
  RTFEditor.Modified:= false;

end;

class constructor TRTFFrame.Create;
begin
  TDocumentFrame.RegisterEditor('Rich Text Format File','rtf',TRTFFrame);
end;

procedure TRTFFrame.Load(aStream: TStream);
begin
  RTFEditor.LoadRichText(aStream);
  RTFEditor.ReadOnly := false;
  RTFEditor.Modified := false;
end;

procedure TRTFFrame.DisplayLoadError(aText: String);
begin
  RTFEditor.Clear;
  RTFEditor.SelText := aText;
  RTFEditor.ReadOnly := true;
  RTFEditor.Modified := false;
end;

function TRTFFrame.CanUndo: Boolean;
begin
  Result:=RTFEditor.CanUndo;
end;

function TRTFFrame.CanRedo: Boolean;
begin
  // TODO:
  Result:=false;
end;

procedure TRTFFrame.Paste;
begin
  RTFEditor.PasteFromClipboard;
end;

procedure TRTFFrame.Copy;
begin
  RTFEditor.CopyToClipboard;
end;

procedure TRTFFrame.Cut;
begin
  RTFEditor.CutToClipboard;
end;

procedure TRTFFrame.Undo;
begin
  RTFEditor.Undo;
end;

procedure TRTFFrame.Redo;
begin
  // TODO:
end;

procedure TRTFFrame.SelectAll;
begin
  RTFEditor.SelectAll;
end;

const
  gTextStyleMap: array[TTextStyle] of TFontStyle = (fsBold, fsItalic);

procedure TRTFFrame.ToggleTextStyle(aFormat: TTextStyle);
var
  lAttrs: TFontParams;
  lStyle: TFontStyle;
begin
  lStyle := gTextStyleMap[aFormat];

  InitFontParams(lAttrs{%H-});
  RTFEditor.GetTextAttributes(RTFEditor.SelStart,lAttrs);
  if lStyle in lAttrs.Style then
     lAttrs.Style := lAttrs.Style - [lStyle]
  else
     lAttrs.Style := lAttrs.Style + [lStyle];
  RTFEditor.SetTextAttributes(RTFEditor.SelStart,RTFEditor.SelLength,lAttrs);
end;

procedure TRTFFrame.ClearTextStyles;
var
  lAttrs: TFontParams;
begin
  InitFontParams(lAttrs{%H-});
  RTFEditor.GetTextAttributes(RTFEditor.SelStart,lAttrs);
  lAttrs.Style := [];
  RTFEditor.SetTextAttributes(RTFEditor.SelStart,RTFEditor.SelLength,lAttrs);
end;

procedure TRTFFrame.SetParagraphStyle(aFormat: TParagraphStyle);
begin
  case aFormat of
    psNormal:
      StyleBodyText;
    psHeader1, psHeader2, psHeader3, psHeader4, psHeader5, psHeader6:
      StyleHeader;
    psBullettedList:
      StyleBullettedList;
    psNumberedList:
      StyleNumberedList;
    psBlockQuote:
      SetIndent(25);
  end;
end;

procedure TRTFFrame.DeltaIndent(aDelta: Double);
var
  lMetric: TParaMetric;
begin
  InitParaMetric(lMetric{%H-});
  RTFEditor.GetParaMetric(RTFEditor.SelStart,lMetric);
  lMetric.HeadIndent := lMetric.HeadIndent + aDelta;
  if lMetric.HeadIndent < 0 then
     lMetric.HeadIndent := 0;
  lMetric.FirstLine:= lMetric.HeadIndent;
  RTFEditor.SetParaMetric(RTFEditor.SelStart,RTFEditor.SelLength,lMetric);
  RTFEditor.Modified := true;
end;

procedure TRTFFrame.DecreaseListIndent;
begin
  DeltaIndent(-25);
end;

procedure TRTFFrame.StyleBullettedList;
var
  lNumbering: TParaNumbering;
begin
  InitParaNumbering(lNumbering{%H-});
  RTFEditor.GetParaNumbering(RTFEditor.SelStart,lNumbering);
  lNumbering.Style:=TParaNumStyle.pnBullet;
  RTFEditor.SetParaNumbering(RTFEditor.SelStart,RTFEditor.SelLength,lNumbering);
end;

procedure TRTFFrame.StyleBodyText;
var
  lNumbering: TParaNumbering;
begin
  InitParaNumbering(lNumbering{%H-});
  RTFEditor.SetParaNumbering(RTFEditor.SelStart,RTFEditor.SelLength,lNumbering);
  SetIndent(0);
  // TODO: What else?
end;

procedure TRTFFrame.StyleNumberedList;
var
  lNumbering: TParaNumbering;
begin
  InitParaNumbering(lNumbering{%H-});
  RTFEditor.GetParaNumbering(RTFEditor.SelStart,lNumbering);
  lNumbering.Style:=TParaNumStyle.pnNumber;
  RTFEditor.SetParaNumbering(RTFEditor.SelStart,RTFEditor.SelLength,lNumbering);
end;

procedure TRTFFrame.StyleHeader;
var
  lNumbering: TParaNumbering;
begin
  InitParaNumbering(lNumbering{%H-});
  RTFEditor.GetParaNumbering(RTFEditor.SelStart,lNumbering);
  lNumbering.Style:=TParaNumStyle.pnNone;
  RTFEditor.SetParaNumbering(RTFEditor.SelStart,RTFEditor.SelLength,lNumbering);
  SetIndent(0);
  // TODO: What else?
end;

procedure TRTFFrame.SetIndent(aValue: Double);
var
  lMetric: TParaMetric;
begin
  InitParaMetric(lMetric{%H-});
  RTFEditor.GetParaMetric(RTFEditor.SelStart,lMetric);
  lMetric.HeadIndent := aValue;
  if lMetric.HeadIndent < 0 then
     lMetric.HeadIndent := 0;
  lMetric.FirstLine:= lMetric.HeadIndent;
  RTFEditor.SetParaMetric(RTFEditor.SelStart,RTFEditor.SelLength,lMetric);
  RTFEditor.Modified := true;
end;

function TRTFFrame.CanFormat: Boolean;
begin
  Result:=true;
end;

procedure TRTFFrame.IncreaseListIndent;
begin
  DeltaIndent(25);
end;

end.

